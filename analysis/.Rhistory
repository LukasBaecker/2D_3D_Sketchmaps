subtitle = "and in color the order of drawing tools")
#setting up the linear mixed effects model
visible_and_correct.model = lmer(score ~ IPT + (1|ID) + order + DrawingType, data=users_data_frame, REML = FALSE)
ggplot(data = users_data_frame,
aes(x   = IPT,
y   = score,
col = as.factor(DrawingType)))+
geom_point(size     = 1,
alpha    = .7,
position = "jitter")+
geom_smooth(method   = lm,
se       = T,
size     = 1.5,
linetype = 1,
alpha    = .7)+
theme_minimal()+
labs(title    = "Linear Relationship Between Overall Drawing Score and IPT for the 2 Drawingtools")+
scale_color_manual(name   =" Drawingtool",
labels = c("Pen and Paper", "VR"),
values = c("darkcyan", "orange"))
#residual plot
plot(fitted(visible_and_correct.model), resid(visible_and_correct.model, type = "pearson"))+
abline(0,0, col="red")
#QQ-plot to check for normality of residuals
qqnorm(resid(visible_and_correct.model))+
qqline(resid(visible_and_correct.model), col = "red") # add a perfect fit line
#setting up the linear mixed effects model
visible_and_correct.model = lmer(score ~ IPT + (1|ID) + order + DrawingType, data=users_data_frame, REML = FALSE)
ggplot(data = users_data_frame,
aes(x   = IPT,
y   = score,
col = as.factor(DrawingType)))+
geom_point(size     = 1,
alpha    = .7,
position = "jitter")+
geom_smooth(method   = lm,
se       = T,
size     = 1.5,
linetype = 1,
alpha    = .7)+
theme_minimal()+
labs(title    = "Linear Relationship Between Overall Drawing Score and IPT for the 2 Drawingtools")+
scale_color_manual(name   =" Drawingtool",
labels = c("Pen and Paper", "VR"),
values = c("darkcyan", "orange"))
#residual plot
plot(fitted(visible_and_correct.model), resid(visible_and_correct.model, type = "pearson"))+
abline(0,0, col="red")
#setting up the linear mixed effects model
visible_and_correct.model = lmer(score ~ IPT + order + DrawingType + (1|ID), data=users_data_frame, REML = FALSE)
#setting up the linear mixed effects model
visible_and_correct.model = lmer(score ~ IPT + order +
DrawingType + (1|ID), data=users_data_frame, REML = FALSE)
#setting up the null model that does not contain the Drawing Type
visible_and_correct.null = lmer(score ~ IPT + order +
(1|ID), data=users_data_frame, REML = FALSE)
users_data.prep <- matrix(nrow = participant_count*2, ncol = 7, byrow = FALSE)
colnames(users_data.prep) <- c("ID","IPT","DrawingType","order","visibility.score","correctness.score","f-score")
users_data_frame.visible <- as.data.frame(users_data.prep)
users_data_frame.correct <- as.data.frame(users_data.prep)
#writing the values to the dataframe
for(id in 1:participant_count){
users_data_frame[id,1] <- as.factor(id)
users_data_frame[id,2] <- ipt_results[id]
users_data_frame[id,3] <- "2D"
users_data_frame[id,4] <- if(id %% 2 == 0){"3Dfirst"}else{"2Dfirst"}
users_data_frame[id,5] <- as.numeric(all_Visibility2D[id])
users_data_frame[id,6] <- as.numeric(all_Correct2D[id]) #TODO: currently absolute count
users_data_frame[id,7] <- as.numeric(allSum2d[id]) #TODO: currently not the f-score
users_data_frame[(id+participant_count),1] <- as.factor(id)
users_data_frame[(id+participant_count),2] <- ipt_results[id]
users_data_frame[(id+participant_count),3] <- "3D"
users_data_frame[(id+participant_count),4] <- if(id %% 2 == 0){"3Dfirst"}else{"2Dfirst"}
users_data_frame[(id+participant_count),5] <- all_Visibility3D[id]
users_data_frame[(id+participant_count),6] <- all_Correct3D[id] #TODO: currently absolute count
users_data_frame[(id+praticipant_count),7] <- as.numeric(allSum3d[id]) #TODO: currently not the f-score
}
knitr::opts_chunk$set(echo = TRUE)
#Run this if you have all the packages, otherwise run the chunk below:
library(tidyverse)
library(here)
library(plotly)
library(sf)
library(knitr)
library(data.table)
library(lme4)
library(lmerTest)
library(flexplot)
library(MuMIn)
library(effects)
library(ggplot2)
library(sjPlot)
library(sjstats)
library(reshape2)
# Info for the csv:
# ID is the ID of the participant
# Age is the age of the participant
# Gender is a number from 1 to 4 where 1 means male, 2 means femal, 3 means diverse and 4 means undefined
# Q1 to Q10 are the answers for the IPT
# Order defines the order of drawing tasks. 1 means that the person first drew with pen and paper and 2 means that the person first drew in gravity sketch
# PnP_1 to PnP_6 is the NASA-TLX for pen and paper drawing
# VR_1 to VR_6 is the NASA-TLX for drawing with gravity sketch
questionair <- read.csv(here("data/questionair.csv"))
participant_count <- nrow(questionair) # count the number of participants
# age statistics
age_mean <- mean(questionair$Age)
age_min <- min(questionair$Age)
age_max <- max(questionair$Age)
boxplot(questionair$Age) #visualize the age distribution
# table showing the gender contribution
gender_table <- table(questionair$Gender)
solution <- c(3,1,4,3,4,3,2,2,2,1) # the correct answers for the IPT
ipt_results <- vector(length=participant_count) # create a vector for saving the IPT results where the index is the ID of the participant
for (index in 1:participant_count) {
counter <- 0 # counting right answers
for(q in 1:10){
if(questionair[index,paste("Q",q, sep = "")]==solution[q]){
counter<- counter+1
}
}
ipt_results[index] <- counter #safe results in an vector where the index is the ID of the participant
}
ipt_mean <- mean(ipt_results)
boxplot(ipt_results)
#TODO: analyse the NASA-TLX with an overall value
#TODO: distinguish between the mental and the physical demand here
#Q1: Mental demand from not demanding to highly demanding
#Q2: Physiscal Demand from not demanding to highly demanding
#Q3: Time Requ from not time consuming to highly time consuming
#Q4: Performance Satifcation from not at all satisfied to totally satisfied
#Q5: How much effort and how hard had you to work from not hard at all to very hard
#Q6: Frustration from not frustrated at all to highly frustrated
TLX.perQuestion <- matrix(nrow = 6, ncol = 3, byrow = FALSE)
colnames(TLX.perQuestion) <-  c("Question","Pen and Paper", "VR")
TLX.perQuestion_dataframe <- as.data.frame(TLX.perQuestion)
TLX.perQuestion_std <- matrix(nrow = 6, ncol = 3, byrow = FALSE)
colnames(TLX.perQuestion_std) <-  c("Question","Pen and Paper", "VR")
TLX.perQuestion_std_dataframe <- as.data.frame(TLX.perQuestion_std)
TLX.perQuestion_std_list <- vector(length = 12)
#TLX.perQuestion_std <- matrix(nrow = 6, ncol = 3, byrow = FALSE)
#colnames(TLX.perQuestion_std) <-  c("Question","Pen and Paper", "VR")
#TLX.perQuestion_std_dataframe <- as.data.frame(TLX.perQuestion_std)
TLX_questions <- c("Mental","Physical","Time","Performance","Effort","Frustration")
drawingtypes <- c("PnP","VR")
for(q in TLX_questions){
TLX.perQuestion_dataframe[match(q,TLX_questions),1] <- q
TLX.perQuestion_std_dataframe[match(q,TLX_questions),1] <- q
for (d in drawingtypes){
TLX.perQuestion_dataframe[match(q,TLX_questions),match(d,drawingtypes)+1] <- mean(questionair[,paste(d,match(q,TLX_questions), sep = "_")])
TLX.perQuestion_std_dataframe[match(q,TLX_questions),match(d,drawingtypes)+1] <- sd(questionair[,paste(d,match(q,TLX_questions), sep = "_")])
TLX.perQuestion_std_list[match(q,TLX_questions)*match(d,drawingtypes)] <- sd(questionair[,paste(d,match(q,TLX_questions), sep = "_")])
}
}
d = melt(TLX.perQuestion_dataframe, id.vars = "Question") #prepare the dataframe for the plot
#TODO:
# y min und y max fÃ¼r confidence intervals and find param for adding these intervals to the plot 95 percent intervalls
# https://r-graph-gallery.com/4-barplot-with-error-bar.html
ggplot(data = d,
mapping = aes(x = Question, y = value, fill = variable)) +
geom_col(position = position_dodge())+
#TODO: use the 95 percent interval and not the standart deviation
geom_errorbar( aes(x=Question, ymin=value-TLX.perQuestion_std_list, ymax=value+TLX.perQuestion_std_list), colour="black",position = position_dodge(width = 0.9))
drawings_2d.import <- read.csv(here("data/Analysis_2D.csv"))# import the csv that contains the analysis data for the 2D drawings
drawings_3d.import <- read.csv(here("data/Analysis_3D.csv")) # import the csv that contains the analysis data for the 3D drawings
duringThesisNotes.import <- read.csv(here("data/DuringThesisNotes.csv"))
# transpose the tables using data.table library
drawings_2d <- transpose(drawings_2d.import)
drawings_3d <- transpose(drawings_3d.import)
duringThesisNotes <- transpose(duringThesisNotes.import)
# and also shift the col and row names for both lists
rownames(drawings_2d) <- colnames(drawings_2d.import)
colnames(drawings_2d) <- rownames(drawings_2d.import)
rownames(drawings_3d) <- colnames(drawings_3d.import)
colnames(drawings_3d) <- rownames(drawings_3d.import)
rownames(duringThesisNotes) <- colnames(duringThesisNotes.import)
colnames(duringThesisNotes) <- rownames(duringThesisNotes.import)
# after the transpose the correct colnames are in the first row.
# Use the first row as names and delete the row for both lists
names(drawings_2d)<-drawings_2d[1,]
drawings_2d<-drawings_2d[-1,]
names(drawings_3d)<-drawings_3d[1,]
drawings_3d<-drawings_3d[-1,]
names(duringThesisNotes)<-duringThesisNotes[1,]
duringThesisNotes<-duringThesisNotes[-1,]
#create vectors for saving the sum values of the analysis with the length of the number of participants
#TODO: replace these overall values with f-score
allSum2d <- vector(length=participant_count)
allSum3d <- vector(length=participant_count)
#create more vectors for saving only the visibility sum and the correctness sum
all_Visibility2D <- vector(length=participant_count)
all_Z_Visibility2D <- vector(length=participant_count) #thinking about only analyzing the z visibility
all_Correct2D <- vector(length=participant_count)
all_Visibility3D <- vector(length=participant_count)
all_Correct3D <- vector(length=participant_count)
for(id in 1:participant_count){
#counter variables for the loop
sum2d <- 0
sum2Dvisible <- 0
sum2Dcorrect <-0
sum3d <- 0
sum3Dvisible <- 0
sum3Dcorrect <-0
# evaluate the object relations
for(i in 4:129){
# check how many are correct in 2D
sum2d <- sum2d + as.numeric(drawings_2d[id,i])
# check how many are correct in 3D
sum3d <- sum3d + as.numeric(drawings_3d[id,i])
# compare only the visibility
if ( substr(colnames(drawings_2d)[i],1, 1) == "V" ){
sum2Dvisible <- sum2Dvisible + as.numeric(drawings_2d[id,i])
sum3Dvisible <- sum3Dvisible + as.numeric(drawings_3d[id,i])
}
# compare only the correctness
#TODO: replace the absolute correctness with relative values depending on the visibility or different
if ( substr(colnames(drawings_2d)[i],1, 1) == "C" ){
sum2Dcorrect <- sum2Dcorrect + as.numeric(drawings_2d[id,i])
sum3Dcorrect <- sum3Dcorrect + as.numeric(drawings_3d[id,i])
}
}
#save the values to the vectors
allSum2d[id]<-sum2d
allSum3d[id]<-sum3d
all_Visibility2D[id]<-sum2Dvisible
all_Visibility3D[id]<-sum3Dvisible
all_Correct2D[id]<-sum2Dcorrect
all_Correct3D[id]<-sum3Dcorrect
}
users_data.prep <- matrix(nrow = participant_count*2, ncol = 7, byrow = FALSE)
colnames(users_data.prep) <- c("ID","IPT","DrawingType","order","visibility.score","correctness.score","f-score")
users_data_frame.visible <- as.data.frame(users_data.prep)
users_data_frame.correct <- as.data.frame(users_data.prep)
#writing the values to the dataframe
for(id in 1:participant_count){
users_data_frame[id,1] <- as.factor(id)
users_data_frame[id,2] <- ipt_results[id]
users_data_frame[id,3] <- "2D"
users_data_frame[id,4] <- if(id %% 2 == 0){"3Dfirst"}else{"2Dfirst"}
users_data_frame[id,5] <- as.numeric(all_Visibility2D[id])
users_data_frame[id,6] <- as.numeric(all_Correct2D[id]) #TODO: currently absolute count
users_data_frame[id,7] <- as.numeric(allSum2d[id]) #TODO: currently not the f-score
users_data_frame[(id+participant_count),1] <- as.factor(id)
users_data_frame[(id+participant_count),2] <- ipt_results[id]
users_data_frame[(id+participant_count),3] <- "3D"
users_data_frame[(id+participant_count),4] <- if(id %% 2 == 0){"3Dfirst"}else{"2Dfirst"}
users_data_frame[(id+participant_count),5] <- all_Visibility3D[id]
users_data_frame[(id+participant_count),6] <- all_Correct3D[id] #TODO: currently absolute count
users_data_frame[(id+praticipant_count),7] <- as.numeric(allSum3d[id]) #TODO: currently not the f-score
}
users_data.prep <- matrix(nrow = participant_count*2, ncol = 7, byrow = FALSE)
colnames(users_data.prep) <- c("ID","IPT","DrawingType","order","visibility.score","correctness.score","f-score")
users_data_frame <- as.data.frame(users_data.prep)
#writing the values to the dataframe
for(id in 1:participant_count){
users_data_frame[id,1] <- as.factor(id)
users_data_frame[id,2] <- ipt_results[id]
users_data_frame[id,3] <- "2D"
users_data_frame[id,4] <- if(id %% 2 == 0){"3Dfirst"}else{"2Dfirst"}
users_data_frame[id,5] <- as.numeric(all_Visibility2D[id])
users_data_frame[id,6] <- as.numeric(all_Correct2D[id]) #TODO: currently absolute count
users_data_frame[id,7] <- as.numeric(allSum2d[id]) #TODO: currently not the f-score
users_data_frame[(id+participant_count),1] <- as.factor(id)
users_data_frame[(id+participant_count),2] <- ipt_results[id]
users_data_frame[(id+participant_count),3] <- "3D"
users_data_frame[(id+participant_count),4] <- if(id %% 2 == 0){"3Dfirst"}else{"2Dfirst"}
users_data_frame[(id+participant_count),5] <- all_Visibility3D[id]
users_data_frame[(id+participant_count),6] <- all_Correct3D[id] #TODO: currently absolute count
users_data_frame[(id+praticipant_count),7] <- as.numeric(allSum3d[id]) #TODO: currently not the f-score
}
#writing the values to the dataframe
for(id in 1:participant_count){
users_data_frame[id,1] <- as.factor(id)
users_data_frame[id,2] <- ipt_results[id]
users_data_frame[id,3] <- "2D"
users_data_frame[id,4] <- if(id %% 2 == 0){"3Dfirst"}else{"2Dfirst"}
users_data_frame[id,5] <- as.numeric(all_Visibility2D[id])
users_data_frame[id,6] <- as.numeric(all_Correct2D[id]) #TODO: currently absolute count
users_data_frame[id,7] <- as.numeric(allSum2d[id]) #TODO: currently not the f-score
users_data_frame[(id+participant_count),1] <- as.factor(id)
users_data_frame[(id+participant_count),2] <- ipt_results[id]
users_data_frame[(id+participant_count),3] <- "3D"
users_data_frame[(id+participant_count),4] <- if(id %% 2 == 0){"3Dfirst"}else{"2Dfirst"}
users_data_frame[(id+participant_count),5] <- all_Visibility3D[id]
users_data_frame[(id+participant_count),6] <- all_Correct3D[id] #TODO: currently absolute count
users_data_frame[(id+participant_count),7] <- as.numeric(allSum3d[id]) #TODO: currently not the f-score
}
#TODO: sharpen the titles and subtitles, labels and styling
ggplot(data    = users_data_frame ,
aes(x   = IPT,
y   = visibility-score,
col = DrawingType,
group = DrawingType))+ #to add the colors for different classes
geom_point(size     = 1.2,
alpha    = .8,
position = "jitter")+ #to add some random noise for plotting purposes
theme_minimal()+
geom_smooth(method = lm,
se     = FALSE,
size   = .5,
alpha  = .8)+ # to add regression line
labs(title    = "Visibility-Score depending on IPT",
subtitle = "and in color the different drawing tools")
#TODO: sharpen the titles and subtitles, labels and styling
ggplot(data    = users_data_frame ,
aes(x   = IPT,
y   = visibility-score,
col = DrawingType,
group = DrawingType))+ #to add the colors for different classes
geom_point(linewidth= 1.2,
alpha    = .8,
position = "jitter")+ #to add some random noise for plotting purposes
theme_minimal()+
geom_smooth(method = lm,
se     = FALSE,
size   = .5,
alpha  = .8)+ # to add regression line
labs(title    = "Visibility-Score depending on IPT",
subtitle = "and in color the different drawing tools")
users_data.prep <- matrix(nrow = participant_count*2, ncol = 7, byrow = FALSE)
colnames(users_data.prep) <- c("ID","IPT","DrawingType","order","visibility.score","correctness.score","f.score")
users_data_frame <- as.data.frame(users_data.prep)
#writing the values to the dataframe
for(id in 1:participant_count){
users_data_frame[id,1] <- as.factor(id)
users_data_frame[id,2] <- ipt_results[id]
users_data_frame[id,3] <- "2D"
users_data_frame[id,4] <- if(id %% 2 == 0){"3Dfirst"}else{"2Dfirst"}
users_data_frame[id,5] <- as.numeric(all_Visibility2D[id])
users_data_frame[id,6] <- as.numeric(all_Correct2D[id]) #TODO: currently absolute count
users_data_frame[id,7] <- as.numeric(allSum2d[id]) #TODO: currently not the f-score
users_data_frame[(id+participant_count),1] <- as.factor(id)
users_data_frame[(id+participant_count),2] <- ipt_results[id]
users_data_frame[(id+participant_count),3] <- "3D"
users_data_frame[(id+participant_count),4] <- if(id %% 2 == 0){"3Dfirst"}else{"2Dfirst"}
users_data_frame[(id+participant_count),5] <- all_Visibility3D[id]
users_data_frame[(id+participant_count),6] <- all_Correct3D[id] #TODO: currently absolute count
users_data_frame[(id+participant_count),7] <- as.numeric(allSum3d[id]) #TODO: currently not the f-score
}
#TODO: sharpen the titles and subtitles, labels and styling
ggplot(data    = users_data_frame ,
aes(x   = IPT,
y   = visibility.score,
col = DrawingType,
group = DrawingType))+ #to add the colors for different classes
geom_point(linewidth= 1.2,
alpha    = .8,
position = "jitter")+ #to add some random noise for plotting purposes
theme_minimal()+
geom_smooth(method = lm,
se     = FALSE,
size   = .5,
alpha  = .8)+ # to add regression line
labs(title    = "Visibility-Score depending on IPT",
subtitle = "and in color the different drawing tools")
#setting up the linear mixed effects model for the visible results only
visible.model = lmer(score ~ IPT + order + (1|ID) + DrawingType, data=users_data_frame.visible, REML = FALSE)
#setting up the linear mixed effects model for the visible results only
visiblity.model = lmer(score ~ IPT + order + (1|ID) + DrawingType, data=users_data_frame, REML = FALSE)
#setting up the linear mixed effects model for the visible results only
visiblity.model = lmer(visibility.score ~ IPT + order + (1|ID) + DrawingType, data=users_data_frame, REML = FALSE)
users_data_frame
#writing the values to the dataframe
for(id in 1:participant_count){
print(id)
print(as.factor(id))
users_data_frame[id,1] <- as.factor(id)
users_data_frame[id,2] <- ipt_results[id]
users_data_frame[id,3] <- "2D"
users_data_frame[id,4] <- if(id %% 2 == 0){"3Dfirst"}else{"2Dfirst"}
users_data_frame[id,5] <- as.numeric(all_Visibility2D[id])
users_data_frame[id,6] <- as.numeric(all_Correct2D[id]) #TODO: currently absolute count
users_data_frame[id,7] <- as.numeric(allSum2d[id]) #TODO: currently not the f-score
users_data_frame[(id+participant_count),1] <- as.factor(id)
users_data_frame[(id+participant_count),2] <- ipt_results[id]
users_data_frame[(id+participant_count),3] <- "3D"
users_data_frame[(id+participant_count),4] <- if(id %% 2 == 0){"3Dfirst"}else{"2Dfirst"}
users_data_frame[(id+participant_count),5] <- all_Visibility3D[id]
users_data_frame[(id+participant_count),6] <- all_Correct3D[id] #TODO: currently absolute count
users_data_frame[(id+participant_count),7] <- as.numeric(allSum3d[id]) #TODO: currently not the f-score
}
users_data_frame
#writing the values to the dataframe
for(id in 1:participant_count){
print(id)
print(as.factor(id))
users_data_frame[id,1] <- id
users_data_frame[id,2] <- ipt_results[id]
users_data_frame[id,3] <- "2D"
users_data_frame[id,4] <- if(id %% 2 == 0){"3Dfirst"}else{"2Dfirst"}
users_data_frame[id,5] <- as.numeric(all_Visibility2D[id])
users_data_frame[id,6] <- as.numeric(all_Correct2D[id]) #TODO: currently absolute count
users_data_frame[id,7] <- as.numeric(allSum2d[id]) #TODO: currently not the f-score
users_data_frame[(id+participant_count),1] <- id
users_data_frame[(id+participant_count),2] <- ipt_results[id]
users_data_frame[(id+participant_count),3] <- "3D"
users_data_frame[(id+participant_count),4] <- if(id %% 2 == 0){"3Dfirst"}else{"2Dfirst"}
users_data_frame[(id+participant_count),5] <- all_Visibility3D[id]
users_data_frame[(id+participant_count),6] <- all_Correct3D[id] #TODO: currently absolute count
users_data_frame[(id+participant_count),7] <- as.numeric(allSum3d[id]) #TODO: currently not the f-score
}
users_data_frame
#writing the values to the dataframe
for(id in 1:participant_count){
users_data_frame[id,1] <- as.factor(id)
users_data_frame[id,2] <- ipt_results[id]
users_data_frame[id,3] <- "2D"
users_data_frame[id,4] <- if(id %% 2 == 0){"3Dfirst"}else{"2Dfirst"}
users_data_frame[id,5] <- as.numeric(all_Visibility2D[id])
users_data_frame[id,6] <- as.numeric(all_Correct2D[id]) #TODO: currently absolute count
users_data_frame[id,7] <- as.numeric(allSum2d[id]) #TODO: currently not the f-score
users_data_frame[(id+participant_count),1] <- as.factor(id)
users_data_frame[(id+participant_count),2] <- ipt_results[id]
users_data_frame[(id+participant_count),3] <- "3D"
users_data_frame[(id+participant_count),4] <- if(id %% 2 == 0){"3Dfirst"}else{"2Dfirst"}
users_data_frame[(id+participant_count),5] <- all_Visibility3D[id]
users_data_frame[(id+participant_count),6] <- all_Correct3D[id] #TODO: currently absolute count
users_data_frame[(id+participant_count),7] <- as.numeric(allSum3d[id]) #TODO: currently not the f-score
}
users_data_frame
#writing the values to the dataframe
for(id in 1:participant_count){
users_data_frame[id,1] <- as.string(id)
users_data_frame[id,2] <- ipt_results[id]
users_data_frame[id,3] <- "2D"
users_data_frame[id,4] <- if(id %% 2 == 0){"3Dfirst"}else{"2Dfirst"}
users_data_frame[id,5] <- as.numeric(all_Visibility2D[id])
users_data_frame[id,6] <- as.numeric(all_Correct2D[id]) #TODO: currently absolute count
users_data_frame[id,7] <- as.numeric(allSum2d[id]) #TODO: currently not the f-score
users_data_frame[(id+participant_count),1] <- as.string(id)
users_data_frame[(id+participant_count),2] <- ipt_results[id]
users_data_frame[(id+participant_count),3] <- "3D"
users_data_frame[(id+participant_count),4] <- if(id %% 2 == 0){"3Dfirst"}else{"2Dfirst"}
users_data_frame[(id+participant_count),5] <- all_Visibility3D[id]
users_data_frame[(id+participant_count),6] <- all_Correct3D[id] #TODO: currently absolute count
users_data_frame[(id+participant_count),7] <- as.numeric(allSum3d[id]) #TODO: currently not the f-score
}
users_data_frame[(id+participant_count),1] <- as.character(id)
#writing the values to the dataframe
for(id in 1:participant_count){
users_data_frame[id,1] <- as.character(id)
users_data_frame[id,2] <- ipt_results[id]
users_data_frame[id,3] <- "2D"
users_data_frame[id,4] <- if(id %% 2 == 0){"3Dfirst"}else{"2Dfirst"}
users_data_frame[id,5] <- as.numeric(all_Visibility2D[id])
users_data_frame[id,6] <- as.numeric(all_Correct2D[id]) #TODO: currently absolute count
users_data_frame[id,7] <- as.numeric(allSum2d[id]) #TODO: currently not the f-score
users_data_frame[(id+participant_count),1] <- as.character(id)
users_data_frame[(id+participant_count),2] <- ipt_results[id]
users_data_frame[(id+participant_count),3] <- "3D"
users_data_frame[(id+participant_count),4] <- if(id %% 2 == 0){"3Dfirst"}else{"2Dfirst"}
users_data_frame[(id+participant_count),5] <- all_Visibility3D[id]
users_data_frame[(id+participant_count),6] <- all_Correct3D[id] #TODO: currently absolute count
users_data_frame[(id+participant_count),7] <- as.numeric(allSum3d[id]) #TODO: currently not the f-score
}
users_data_frame
#TODO: sharpen the titles and subtitles, labels and styling
ggplot(data    = users_data_frame ,
aes(x   = IPT,
y   = visibility.score,
col = DrawingType,
group = DrawingType))+ #to add the colors for different classes
geom_point(linewidth= 1.2,
alpha    = .8,
position = "jitter")+ #to add some random noise for plotting purposes
theme_minimal()+
geom_smooth(method = lm,
se     = FALSE,
size   = .5,
alpha  = .8)+ # to add regression line
labs(title    = "Visibility-Score depending on IPT",
subtitle = "and in color the different drawing tools")
#setting up the linear mixed effects model for the visible results only
visiblity.model = lmer(visibility.score ~ IPT + order + (1|ID) + DrawingType, data=users_data_frame, REML = FALSE)
summary(visiblity.model)
ggplot(data    = users_data_frame.correct ,
aes(x   = IPT,
y   = score,
col = DrawingType,
group = DrawingType))+ #to add the colours for different classes
geom_point(size     = 1.2,
alpha    = .8,
position = "jitter")+ #to add some random noise for plotting purposes
theme_minimal()+
geom_smooth(method = lm,
se     = FALSE,
size   = .5,
alpha  = .8)+ # to add regression line
labs(title    = "Correctness-Score depending on IPT",
subtitle = "and in color the different drawing tools")
ggplot(data    = users_data_frame ,
aes(x   = IPT,
y   = correctness.score,
col = DrawingType,
group = DrawingType))+ #to add the colours for different classes
geom_point(size     = 1.2,
alpha    = .8,
position = "jitter")+ #to add some random noise for plotting purposes
theme_minimal()+
geom_smooth(method = lm,
se     = FALSE,
size   = .5,
alpha  = .8)+ # to add regression line
labs(title    = "Correctness-Score depending on IPT",
subtitle = "and in color the different drawing tools")
correctess.model = lmer(score ~ IPT + order + (1|ID) + DrawingType, data=users_data_frame.correct, REML = FALSE)
correctess.model = lmer(correctness.score ~ IPT + order + (1|ID) + DrawingType, data=users_data_frame, REML = FALSE)
correctness.null = lmer(correctness.score ~ IPT + (1|ID) , data=users_data_frame, REML = FALSE)
anova(correctess.null,correctness.model)
anova(correctness.null,correctness.model)
correctness.model = lmer(correctness.score ~ IPT + order + (1|ID) + DrawingType, data=users_data_frame, REML = FALSE)
correctness.null = lmer(correctness.score ~ IPT + (1|ID) , data=users_data_frame, REML = FALSE)
anova(correctness.null,correctness.model)
